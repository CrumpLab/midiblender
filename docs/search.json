[{"path":"https://crumplab.com/midiblender/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 midiblender authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://crumplab.com/midiblender/articles/Getting_started.html","id":"importing-mangling-exporting","dir":"Articles","previous_headings":"","what":"Importing, Mangling, Exporting","title":"Getting started with MIDI mangling in R","text":"workflow : Import midi file R data.frame Mangle MIDI R Construct new valid midi file, export (even play fluidsynth immediate gratification) import export mostly calls pyramidi. mangling part mostly done {midiblender}.","code":""},{"path":"https://crumplab.com/midiblender/articles/Getting_started.html","id":"importing","dir":"Articles","previous_headings":"Importing, Mangling, Exporting","what":"Importing","title":"Getting started with MIDI mangling in R","text":"’m relying pyramidi python packages wrapped pyramidi (miditapyr mido) import export MIDI. recommend checking documentation packages. ’s quick example importing MIDI file {midiblender}. midi_to_object() helper function wrap common calls pyramidi. following code chunk shows major steps inside function objects contained midi_objects list, list2env(midi_objects, .GlobalEnv) bumps global environment. lot going inside objects miditapyr mido objects. contain MIDI file information various formats, methods, interfaces python reticulate. importing, important aspect midi_df object produced pyramidi::miditapyr$unnest_midi(). one contains midi file R data.frame! example, top 10 rows. MIDI files can get complicated functions developed simple MIDI files mind. simple MIDI file start rows meta tags define important parameters MIDI file. can grabbed midi_df using dplyr::filter(). problems already notice. First, last row meta message belongs end track, contains “end_of_track” message. message placed correctly end example midi file. filtered rows meta == TRUE, shows . look tail midi_df, last line meta message “end_of_track”. second issue particular midi file meta message setting midi tempo. generated file ableton live, guess ’s feature generate midi files. {midiblender} make copy midi_df, grab meta messages, modify include tempo message (case default 500000 120 BPM). MIDI files contain note_on note_off messages sandwiched header meta messages last end_of_track meta message (can kinds messages ). MIDI represents pitch steps 0-127, note column. velocity controls note volume. midi keyboard, every time key pressed , midi file record “note_on” message. key released, “note_off” message recorded. times time column. time column represents messages relative time last message. first three messages data frame 0 time, means get played first. 16 midi ticks later, first “note_off” message occurs. followed simultaneously two messages, simultaneous happen 0 time elapsing relative last time stamp. components place mangling can begin. long mangled results get back MIDI format, result playable.","code":"midi_objects <- midi_to_object(\"all_overworld.mid\") list2env(midi_objects, .GlobalEnv) # add to global environment #> <environment: R_GlobalEnv> #import midi using miditapyr miditapyr_object <- pyramidi::miditapyr$MidiFrames(file_path)  #import using mido mido_object <- pyramidi::mido$MidiFile(file_path)  # to R dataframe message_list_df <- pyramidi::miditapyr$frame_midi(mido_object) ticks_per_beat <- mido_object$ticks_per_beat  # unnest the dataframe midi_df <- pyramidi::miditapyr$unnest_midi(message_list_df) knitr::kable(midi_df[1:10,]) meta_tags <- midi_df %>%   dplyr::filter(meta == TRUE)  knitr::kable(meta_tags) knitr::kable(tail(midi_df)) copy_midi_df <- midiblender::copy_midi_df_track(midi_df, track =0) meta_midi_df <- midiblender::get_midi_meta_df(copy_midi_df) meta_midi_df <- midiblender:::set_midi_tempo_meta(meta_midi_df)  knitr::kable(meta_midi_df) note_messages <- midi_df %>%   dplyr::filter(type %in% c(\"note_on\",\"note_off\") == TRUE)  knitr::kable(head(note_messages))"},{"path":"https://crumplab.com/midiblender/articles/Getting_started.html","id":"mangling","dir":"Articles","previous_headings":"","what":"Mangling","title":"Getting started with MIDI mangling in R","text":"’ll keep mangling example simple . vignettes show complicated generative stuff transformations involving matrix representations. Let’s use R tricks randomize pitch midi file. ’d like randomly assign new note pitch values existing ones. ’s example R fun. takes whole column note values, randomly shuffles using sample(), puts back . Great, MIDI mangled. , good mangly way. example, code keep track pairs note messages. means notes may “note_on” messages don’t get turned , get turned long delay. introduces random sustains changed notes. Anyway, additional considerations needed keep tight. aside, far haven’t developed much way compositional methods, check pyramidi documentation direction. vignettes, get bunch mangling involves converting midi matrix representations back. leads opportunities probabilistic sequence generation related things.","code":"note_messages$note <- sample(note_messages$note)"},{"path":"https://crumplab.com/midiblender/articles/Getting_started.html","id":"exporting","dir":"Articles","previous_headings":"","what":"Exporting","title":"Getting started with MIDI mangling in R","text":"point good go exporting. main requirements reconstitute midi_df data frame meta headers, modified body containing note messages changed, end end_of_track message. point new_midi_df valid MIDI structured R data.frame. next step update miditapyr_object using following method.","code":"# split the meta messages into header and end, return a list with each part meta_df_split <- midiblender::split_meta_df(meta_midi_df)  # added a tempo column to the meta_midi_df earlier,  # need to add it to the note_messages df note_messages <- note_messages %>%   dplyr::mutate(tempo = NaN)  # bind it all together new_midi_df <- rbind(meta_df_split[[1]],                      note_messages,                      meta_df_split[[2]]) # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)"},{"path":"https://crumplab.com/midiblender/articles/Getting_started.html","id":"write-midi-to-file","dir":"Articles","previous_headings":"Exporting","what":"Write midi to file","title":"Getting started with MIDI mangling in R","text":"miditapyr_object now updated new MIDI info. object write file method export contents file. works, mangled, yet somehow still recognizable mario music.","code":"#write midi file to disk miditapyr_object$write_file(\"rando_mario.mid\")"},{"path":"https://crumplab.com/midiblender/articles/Getting_started.html","id":"bouncing-to-mp3-with-fluid-synth","dir":"Articles","previous_headings":"Exporting","what":"bouncing to mp3 with fluid synth","title":"Getting started with MIDI mangling in R","text":"’s possible use fluid synth record midi file audio format. won’t say much , ’s example code. ’m using av package convert wav mp3.","code":"######### # bounce to mp3 with fluid synth  track_name <- \"rando_mario\"  wav_name <- paste0(track_name,\".wav\") midi_name <- paste0(track_name,\".mid\") mp3_name <- paste0(track_name,\".mp3\")  # synthesize midi file to wav with fluid synth system_command <- glue::glue('fluidsynth -F {wav_name} ~/Library/Audio/Sounds/Banks/nintendo_soundfont.sf2 {midi_name}') system(system_command)  # convert wav to mp3 av::av_audio_convert(wav_name,mp3_name)  # clean up and delete wav if(file.exists(wav_name)){   file.remove(wav_name) }"},{"path":[]},{"path":[]},{"path":"https://crumplab.com/midiblender/articles/composition_tests.html","id":"reshaping-global-probabilities","dir":"Articles","previous_headings":"","what":"reshaping global probabilities","title":"composition_tests","text":"","code":"#import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv) # send objects to global environment track_0 <- copy_midi_df_track(midi_df = midi_df,track_num = 0)  # convert to a piano roll matrix all_midi <- midi_df_to_matrix(midi_df,track=0)  # reshape to desired interval music_matrix <- reshape_piano_roll(all_midi,48*2)  # probabilistic sampling  # create conditional vector conditional_vector <- rep(0,dim(music_matrix)[2]) conditional_vector[(c(50,66,76)+1)] <- 1  dot_products <- conditional_vector %*% t(music_matrix) positive_similarity <- which(dot_products > 0)   feature_probs <- get_feature_probs(midi_matrix = music_matrix[positive_similarity,])  mean_note_density <- get_mean_note_density(midi_matrix = music_matrix[positive_similarity,])  new_features <- new_features_from_probs(probs = feature_probs,                                         density = mean_note_density,                                         examples = 1) # loop new_feature_vectors <- new_features  for(i in 1:40) {   # put second half into conditional vector   conditional_vector <- c(new_features[((length(new_features)/2)+1):length(new_features)],                           rep(0,length(new_features)/2))   dot_products <- conditional_vector %*% t(music_matrix)   positive_similarity <- which(dot_products > 0)      if(length(positive_similarity) == 0){     # sample some random stuff     positive_similarity <- sample(1:dim(music_matrix)[1],25)     print(i)   }         feature_probs <-     get_feature_probs(midi_matrix = music_matrix[positive_similarity, ])      mean_note_density <-     get_mean_note_density(midi_matrix = music_matrix[positive_similarity, ])      new_features <- new_features_from_probs(probs = feature_probs,                                           density = mean_note_density,                                           examples = 1)   new_feature_vectors <- rbind(new_feature_vectors,new_features) }  new_matrix <- feature_vector_to_matrix(vec = new_feature_vectors,                                        num_notes = 128)  # transform back to midi midi_time_df <- matrix_to_midi_time(midi_matrix = new_matrix,                                     smallest_time_unit = 1,                                     note_off_length = 8)  meta_messages_df <- get_midi_meta_df(track_0)  meta_messages_df <- set_midi_tempo_meta(meta_messages_df,update_tempo = 600000)  split_meta_messages_df <- split_meta_df(meta_messages_df)  new_midi_df <- matrix_to_midi_track(midi_time_df = midi_time_df,                                     split_meta_list = split_meta_messages_df,                                     channel = 0,                                     velocity = 64)  #### bounce  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)  #write midi file to disk miditapyr_object$write_file(\"try_write.mid\")"},{"path":"https://crumplab.com/midiblender/articles/composition_tests.html","id":"global-probabilities","dir":"Articles","previous_headings":"","what":"global probabilities","title":"composition_tests","text":"","code":"# load a midi file mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv) # send objects to global environment  # copy a particular track for processing track_0 <- copy_midi_df_track(midi_df = midi_df,track_num = 0)  # separate copy to extend with additional timing information copy_track <- copy_and_extend_midi_df(midi_df = midi_df,                                       track_num = 0)  # get timing information metric_tibble <- make_metric_tibble(copy_track, bars = 48, smallest_tick = 8,ticks_per_beat = 96)  # add timing to copy copy_track <- add_bars_to_copy_df(copy_track, metric_tibble)  # convert to a matrix, each row is a bar. music_matrix <- create_midi_matrix(   df = copy_track,   num_notes = 128,   intervals_per_bar = 48,   separate = TRUE )  # probabilistic sampling feature_probs <- get_feature_probs(midi_matrix = music_matrix$pitch_by_time_matrix)  mean_note_density <- get_mean_note_density(midi_matrix = music_matrix$pitch_by_time_matrix)  new_features <- new_features_from_probs(probs = feature_probs,                                         density = mean_note_density,                                         examples = 10)  new_matrix <- feature_vector_to_matrix(vec = new_features,                                        num_notes = 128)  #### transform for export  midi_time_df <- matrix_to_midi_time(midi_matrix = new_matrix,                                     smallest_time_unit = 8,                                     note_off_length = 32)  meta_messages_df <- get_midi_meta_df(track_0)  meta_messages_df <- set_midi_tempo_meta(meta_messages_df,update_tempo = 500000)  split_meta_messages_df <- split_meta_df(meta_messages_df)  new_midi_df <- matrix_to_midi_track(midi_time_df = midi_time_df,                                     split_meta_list = split_meta_messages_df,                                     channel = 0,                                     velocity = 64)  #### bounce  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)  #write midi file to disk miditapyr_object$write_file(\"try_write.mid\")"},{"path":"https://crumplab.com/midiblender/articles/composition_tests.html","id":"try-canon-in-d","dir":"Articles","previous_headings":"","what":"try canon in D","title":"composition_tests","text":"","code":"library(midiblender) #import midi mario <- midi_to_object(\"canon.mid\") list2env(mario, .GlobalEnv) # send objects to global environment track_0 <- copy_midi_df_track(midi_df = midi_df,track_num = 0)  # convert to a piano roll matrix all_midi <- midi_df_to_matrix(midi_df,track=0)  # reshape to desired interval music_matrix <- reshape_piano_roll(all_midi,96*2)  # probabilistic sampling  # create conditional vector conditional_vector <- rep(0,dim(music_matrix)[2]) conditional_vector <- music_matrix[1,] dot_products <- conditional_vector %*% t(music_matrix) positive_similarity <- which(dot_products > 0)   feature_probs <- get_feature_probs(midi_matrix = music_matrix[positive_similarity,])  mean_note_density <- get_mean_note_density(midi_matrix = music_matrix[positive_similarity,])  new_features <- new_features_from_probs(probs = feature_probs,                                         density = mean_note_density,                                         examples = 1) # loop new_feature_vectors <- new_features  for(i in 1:100) {   # put second half into conditional vector   conditional_vector <- c(new_features[((length(new_features)/2)+1):length(new_features)],                           rep(0,length(new_features)/2))   dot_products <- conditional_vector %*% t(music_matrix)   positive_similarity <- which(dot_products > 0)      if(length(positive_similarity)  < 2){     # sample some random stuff     positive_similarity <- sample(1:dim(music_matrix)[1],25)     print(i)   }         feature_probs <-     get_feature_probs(midi_matrix = music_matrix[positive_similarity, ])      mean_note_density <-     get_mean_note_density(midi_matrix = music_matrix[positive_similarity, ])      new_features <- new_features_from_probs(probs = feature_probs,                                           density = mean_note_density,                                           examples = 1)   new_feature_vectors <- rbind(new_feature_vectors,new_features) }  new_matrix <- feature_vector_to_matrix(vec = new_feature_vectors,                                        num_notes = 128)  # transform back to midi midi_time_df <- matrix_to_midi_time(midi_matrix = new_matrix,                                     smallest_time_unit = 2,                                     note_off_length = 8)  meta_messages_df <- get_midi_meta_df(track_0)  meta_messages_df <- set_midi_tempo_meta(meta_messages_df,update_tempo = 1000000)  split_meta_messages_df <- split_meta_df(meta_messages_df)  new_midi_df <- matrix_to_midi_track(midi_time_df = midi_time_df,                                     split_meta_list = split_meta_messages_df,                                     channel = 0,                                     velocity = 100)  #### bounce  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)  #write midi file to disk miditapyr_object$write_file(\"endless_canon.mid\")  ######### # bounce to mp3 with fluid synth  track_name <- \"endless_mario_1\"  wav_name <- paste0(track_name,\".wav\") midi_name <- paste0(track_name,\".mid\") mp3_name <- paste0(track_name,\".mp3\")  # synthesize midi file to wav with fluid synth system_command <- glue::glue('fluidsynth -F {wav_name} ~/Library/Audio/Sounds/Banks/nintendo_soundfont.sf2 {midi_name}') system(system_command)  # convert wav to mp3 av::av_audio_convert(wav_name,mp3_name)  # clean up and delete wav if(file.exists(wav_name)){   file.remove(wav_name) }"},{"path":"https://crumplab.com/midiblender/articles/composition_tests.html","id":"try-canon-in-d-with-blending","dir":"Articles","previous_headings":"","what":"try canon in D with blending","title":"composition_tests","text":"","code":"library(midiblender) #import midi mario <- midi_to_object(\"canon.mid\") list2env(mario, .GlobalEnv) # send objects to global environment track_0 <- copy_midi_df_track(midi_df = midi_df,track_num = 0)  # convert to a piano roll matrix all_midi <- midi_df_to_matrix(midi_df,track=0)  # reshape to desired interval music_matrix <- reshape_piano_roll(all_midi,96*2) probabilistic_matrix <- music_matrix  # probabilistic sampling and blending  for( i in 1: dim(music_matrix)[1]){    conditional_vector <- music_matrix[i,]   dot_products <- conditional_vector %*% t(music_matrix)   positive_similarity <- which(dot_products > 0)      if(length(positive_similarity)  < 2){     # sample some random stuff     positive_similarity <- sample(1:dim(music_matrix)[1],25)     print(i)   }         feature_probs <- get_feature_probs(midi_matrix = music_matrix[positive_similarity,])      mean_note_density <- get_mean_note_density(midi_matrix = music_matrix[positive_similarity,])      new_features <- new_features_from_probs(probs = feature_probs,                                           density = mean_note_density,                                           examples = 1)   probabilistic_matrix[i,] <- new_features }  ## blend blend_matrix <- music_matrix for(i in 1:dim(music_matrix)[1]){   sample_ids <- sample(1:dim(music_matrix)[2])     first_half <- round(length(sample_ids)/2)   blend_vector <- rep(0,length(sample_ids))   blend_vector[sample_ids[1:first_half]] <- music_matrix[i,sample_ids[1:first_half]]   blend_vector[sample_ids[(first_half+1):length(sample_ids)]] <- probabilistic_matrix[i,sample_ids[(first_half+1):length(sample_ids)]]   blend_matrix[i,] <- blend_vector }    new_matrix <- feature_vector_to_matrix(vec = blend_matrix,                                        num_notes = 128)  # transform back to midi midi_time_df <- matrix_to_midi_time(midi_matrix = new_matrix,                                     smallest_time_unit = 1,                                     note_off_length = 8)  meta_messages_df <- get_midi_meta_df(track_0)  meta_messages_df <- set_midi_tempo_meta(meta_messages_df,update_tempo = 1000000)  split_meta_messages_df <- split_meta_df(meta_messages_df)  new_midi_df <- matrix_to_midi_track(midi_time_df = midi_time_df,                                     split_meta_list = split_meta_messages_df,                                     channel = 0,                                     velocity = 100)  #### bounce  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)  #write midi file to disk miditapyr_object$write_file(\"endless_canon.mid\")  ######### # bounce to mp3 with fluid synth  track_name <- \"endless_mario_1\"  wav_name <- paste0(track_name,\".wav\") midi_name <- paste0(track_name,\".mid\") mp3_name <- paste0(track_name,\".mp3\")  # synthesize midi file to wav with fluid synth system_command <- glue::glue('fluidsynth -F {wav_name} ~/Library/Audio/Sounds/Banks/nintendo_soundfont.sf2 {midi_name}') system(system_command)  # convert wav to mp3 av::av_audio_convert(wav_name,mp3_name)  # clean up and delete wav if(file.exists(wav_name)){   file.remove(wav_name) }"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"basic-example-probabilistic-mario","dir":"Articles","previous_headings":"","what":"Basic Example: Probabilistic Mario","title":"Mangling with Matrices","text":"example imports MIDI fromthe overworld theme song Super Mario brothers. {midiblender} used represent MIDI file feature vector matrix format. example, one bar music coded matrix 128 rows possible note, 96*4 columns midi time ticks 4 beats 4/4 bar. Note_on messages coded 1s respective positions matrix. approach ignores note_off entirely, notes length end. Every cell given 0. midi file sliced bars (temporal interval), slice converted matrix representation. matrix slice concatenated long feature vector. resulting matrix can used compute note time probabilities. probabilities used generate new sequences, exported midi file. go conceptual detail blog post.","code":""},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"import-midi","dir":"Articles","previous_headings":"Basic Example: Probabilistic Mario","what":"import midi","title":"Mangling with Matrices","text":"","code":"mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv) # unpack the contents to global environment #> <environment: R_GlobalEnv>"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"transform","dir":"Articles","previous_headings":"Basic Example: Probabilistic Mario","what":"transform","title":"Mangling with Matrices","text":"","code":"# make a copy of the midi_df object containing the desired track track_0 <- copy_midi_df_track(midi_df = midi_df,track_num = 0)  # make another copy of midi_df that will be extended with # additional timing information across columns copy_track <- copy_and_extend_midi_df(midi_df = midi_df,                                       track_num = 0)  # Create a new tibble to keep track of some musical intervals metric_tibble <- make_metric_tibble(   copy_track,   bars = 48,   smallest_tick = 8,   ticks_per_beat = 96 )  # add the timing info to the copy copy_track <- add_bars_to_copy_df(copy_track, metric_tibble)  # convert the df to matrix representation music_matrix <- create_midi_matrix(   df = copy_track,   num_notes = 128,   intervals_per_bar = 48,   separate = TRUE )"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"probability","dir":"Articles","previous_headings":"Basic Example: Probabilistic Mario","what":"probability","title":"Mangling with Matrices","text":"section calculates probabilities matrix representation generates new sequences based probabilities.","code":"# get the probability of each note in time # from the whole matrix feature_probs <- get_feature_probs(midi_matrix = music_matrix$pitch_by_time_matrix)  # calculate the average number of notes per row in the matrix # useful to set the density parameter next mean_note_density <- get_mean_note_density(midi_matrix = music_matrix$pitch_by_time_matrix)  # generate new sequences from the probability vector # basically a wrapper to rbinom() new_features <- new_features_from_probs(probs = feature_probs,                                         density = mean_note_density,                                         examples = 100)  #convert the new sequences to a piano roll style matrix new_matrix <- feature_vector_to_matrix(vec = new_features,                                        num_notes = 128)"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"transform-out","dir":"Articles","previous_headings":"Basic Example: Probabilistic Mario","what":"transform out","title":"Mangling with Matrices","text":"next steps involve converting matrix representation back midi dataframe.","code":"# convert the matrix into a dataframe midi_time_df <- matrix_to_midi_time(midi_matrix = new_matrix,                                     smallest_time_unit = 8,                                     note_off_length = 32)  # grab the meta messages from this copy meta_messages_df <- get_midi_meta_df(track_0)  # set the tempo message (it was missing in this case) meta_messages_df <- set_midi_tempo_meta(meta_messages_df,update_tempo = 500000)  # split the meta messages into top and end split_meta_messages_df <- split_meta_df(meta_messages_df)  # compile the valid MIDI dataframe new_midi_df <- matrix_to_midi_track(midi_time_df = midi_time_df,                                     split_meta_list = split_meta_messages_df,                                     channel = 0,                                     velocity = 64)  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)  #write midi file to disk miditapyr_object$write_file(\"prob_mario.mid\")"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"export-to-mp3","dir":"Articles","previous_headings":"Basic Example: Probabilistic Mario","what":"export to mp3","title":"Mangling with Matrices","text":"use script like bounce midi file mp3 fluidsynth nintendo sound font.","code":"######### # bounce to mp3 with fluid synth  track_name <- \"prob_mario\"  wav_name <- paste0(track_name,\".wav\") midi_name <- paste0(track_name,\".mid\") mp3_name <- paste0(track_name,\".mp3\")  # synthesize midi file to wav with fluid synth system_command <- glue::glue('fluidsynth -F {wav_name} ~/Library/Audio/Sounds/Banks/nintendo_soundfont.sf2 {midi_name}') system(system_command)  # convert wav to mp3 av::av_audio_convert(wav_name,mp3_name)  # clean up and delete wav if(file.exists(wav_name)){   file.remove(wav_name) }"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"matrix-transforms","dir":"Articles","previous_headings":"","what":"Matrix transforms","title":"Mangling with Matrices","text":"handy helper functions getting MIDI matrix.","code":""},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"midi_df_to_matrix","dir":"Articles","previous_headings":"Matrix transforms","what":"midi_df_to_matrix()","title":"Mangling with Matrices","text":"function takes data frame obtained MIDI file converts binary matrix representation, time frames (absolute midi ticks) columns MIDI note numbers (0-127) rows. mario MIDI file lasts total 14113 midi ticks. memory serves, file set 96 ticks per beat. matrix 128 rows possible note, 14113 possible midi time tick. note values time tick represented 1s matrix.","code":"# import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv) #> <environment: R_GlobalEnv>  # convert whole track to a big piano roll style matrix piano_roll_matrix <- midi_df_to_matrix(midi_df= midi_df,                                        track = 0 )  dim(piano_roll_matrix) #> [1]   128 14113"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"reshape_piano_roll","dir":"Articles","previous_headings":"Matrix transforms","what":"reshape_piano_roll()","title":"Mangling with Matrices","text":"function reshapes piano_roll matrix matrix concatenated feature vectors time slice. example, splitting matrix slices 2 beats entail slicing matrix every 96*2 = 192 ticks. sliced matrix concatenated single long feature vector, feature vectors placed new matrix. convenient way quickly reshape matrix purpose calculating note time probabilities new shape, like : Different shapes yield different probabilities, different “musical” results later sequences generated probabilities.","code":"two_beats_matrix <- reshape_piano_roll(piano_roll_matrix,                                        ticks_per_interval = (96*2)) feature_probs <- colSums(two_beats_matrix)/sum(two_beats_matrix)"},{"path":"https://crumplab.com/midiblender/articles/mangling_with_matrices.html","id":"other-examples","dir":"Articles","previous_headings":"","what":"Other examples","title":"Mangling with Matrices","text":"foreseeable future ’m inclined keep posting new examples experiments MIDI mangling music blog. Given fluid state code, ’m sure reproducible examples later , perhaps better keep exploratory stuff . Systematically randomizing Super Mario brothers R Midi matrix representation probabilistic super mario music R MIDI analysis, bags notes, probabilistic generation WIP: Endless probabilistically generated mario music midiblender Midi blending Canon D probabilistically code base becomes solid, ’ll attempt document interesting examples vignettes.","code":""},{"path":"https://crumplab.com/midiblender/articles/midi_construct.html","id":"mono-lead-example","dir":"Articles","previous_headings":"","what":"Mono lead example","title":"Midi data frame constructors with dplyr","text":"code chunk generates random series notes vector possible notes.","code":"# note parameters num_notes <- 128 note_duration <- 24 possible_notes <- c(60, 63, 65, 66, 67, 70, 72, 75)  new_midi_df <- create_empty_midi_df() %>% # initialize    add_meta_track_name(name = \"My track\") %>%   add_meta_tempo(tempo = 500000) %>%   add_meta_time_sig(numerator = 4,                     denominator = 4,                     clocks_per_click = 36,                     notated_32nd_notes_per_beat = 8) %>%   add_program_change(program = 0,                      channel = 0) %>%   add_control_change(control = 0,value = 0) %>%   #use dplyr::add_row to add a bunch of notes   add_row(     i_track = 0,     meta = FALSE,     type = rep(c(\"note_on\", \"note_off\"),num_notes),     time = rep(c(0, note_duration), num_notes),     note = rep(sample(possible_notes,                   size = num_notes,                   replace= TRUE),each=2)   ) %>%   add_meta_end_of_track()   ############## # write midi  #Initialize new pyramidi object new_pyramidi_object <- pyramidi::MidiFramer$new() # update ticks per beat new_pyramidi_object$ticks_per_beat <- 96L # update object with new midi df new_pyramidi_object$mf$midi_frame_unnested$update_unnested_mf(new_midi_df) # write to midi file new_pyramidi_object$mf$write_file(\"file_name.mid\")"},{"path":"https://crumplab.com/midiblender/articles/midi_construct.html","id":"composing-with-a-wide-data-frame","dir":"Articles","previous_headings":"","what":"Composing with a wide data frame","title":"Midi data frame constructors with dplyr","text":"","code":"# note parameters bars <- 16 possible_time_steps <- 16 note_duration <- 24 possible_notes <- c(60, 63, 65, 66, 67, 70, 72, 75)  compose_notes <- tibble::tibble(note_id = integer(),                              note = integer(),                              beat_on = integer(),                              note_on = integer(),                              note_off = integer()) %>%   # use euclidean rhythm   rowwise() %>%   add_row(beat_on = c(replicate(bars,bresenham_euclidean(sample(5:15,1),                                             possible_time_steps,                                             start=1))),           note = sample(possible_notes,                          size = possible_time_steps*bars,                          replace= TRUE)) %>%   ungroup() %>%   # handle note times   mutate(note_id = 1:n(),          note_on = (1:n()-1)*note_duration,          note_off = note_on+note_duration) %>%   filter(beat_on == 1) %>%   #pivot to long   tidyr::pivot_longer(c(\"note_on\",\"note_off\"),names_to=\"type\",values_to=\"time\") %>%   mutate(time = time - lag(time,default=0))  ## add to a new midi df new_midi_df <- create_empty_midi_df() %>% # initialize   add_meta_track_name(name = \"My track\") %>%   add_meta_tempo(tempo = 500000) %>%   add_meta_time_sig(     numerator = 4,     denominator = 4,     clocks_per_click = 36,     notated_32nd_notes_per_beat = 8   ) %>%   add_program_change(program = 0,                      channel = 0) %>%   add_control_change(control = 0, value = 0) %>%   #use dplyr::add_row to add a bunch of notes   add_row(i_track = rep(0,dim(compose_notes)[1]),            meta = rep(FALSE,dim(compose_notes)[1]),           note = compose_notes$note,           type = compose_notes$type,           time = compose_notes$time,           velocity = 64) %>%   add_meta_end_of_track()  #write midi #Initialize new pyramidi object new_pyramidi_object <- pyramidi::MidiFramer$new() # update ticks per beat new_pyramidi_object$ticks_per_beat <- 96L # update object with new midi df new_pyramidi_object$mf$midi_frame_unnested$update_unnested_mf(new_midi_df) # write to midi file new_pyramidi_object$mf$write_file(\"file_name.mid\")"},{"path":"https://crumplab.com/midiblender/articles/midi_mangle.html","id":"mangle_note_wiggler","dir":"Articles","previous_headings":"","what":"mangle_note_wiggler()","title":"Basic MIDI mangling functions","text":"might bit unstable, ’s goodie. semitones input takes vector positive semitone values. used randomly offset every note values vector. keep_same input integer pads sampling vector 0s. sampling process, random value vector chosen add note value. chosen value 0, note changed. notes: function way involved expected. probably need refactored point, may tolerant different kinds midi files.","code":"# import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)  midi_df <- midiblender::set_midi_tempo_midi_df(midi_df)  copy_df <- mangle_note_wiggler(midi_df, semitones = c(4,7), keep_same = 2)  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(copy_df)  #write midi file to disk miditapyr_object$write_file(\"note_wiggler_mario.mid\")"},{"path":"https://crumplab.com/midiblender/articles/midi_mangle.html","id":"mangle_positive_timing","dir":"Articles","previous_headings":"","what":"mangle_positive_timing()","title":"Basic MIDI mangling functions","text":"Add/subtract random ticks time column uniform distribution. Set range distribution ticks_amount control amount jitter. resulting time values negative set zero. function add jitter spread simultaneous messages, chords become jittered triads. Useful subtle humanization, absolutely wreck timing information. Notes: function written work dplyr pipe. might nice hide part inside function can run directly df…sure yet, maybe .","code":"library(dplyr)  # import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)  # a dplyr pipe to apply jitter non-meta messages midi_df %>%   mutate(time = case_when(     meta == FALSE ~ mangle_positive_timing(time, ticks_amount = 5),     meta == TRUE ~ time   )) -> copy_df  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(copy_df)  #write midi file to disk miditapyr_object$write_file(\"jitter_mario.mid\")"},{"path":"https://crumplab.com/midiblender/articles/midi_mangle.html","id":"mangle_transpose","dir":"Articles","previous_headings":"","what":"mangle_transpose()","title":"Basic MIDI mangling functions","text":"Transpose notes semitones.","code":"# import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)  copy_df <- mangle_transpose(midi_df, -10)  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(copy_df)  #write midi file to disk miditapyr_object$write_file(\"transpose_mario.mid\")"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"import-midi","dir":"Articles","previous_headings":"","what":"import midi","title":"scratchpad","text":"","code":"mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"transform","dir":"Articles","previous_headings":"","what":"transform","title":"scratchpad","text":"","code":"track_0 <- copy_midi_df_track(midi_df = midi_df,track_num = 0)  copy_track <- copy_and_extend_midi_df(midi_df = midi_df,                                       track_num = 0)  metric_tibble <- make_metric_tibble(   copy_track,   bars = 48,   smallest_tick = 8,   ticks_per_beat = 96 )  copy_track <- add_bars_to_copy_df(copy_track, metric_tibble)  music_matrix <- create_midi_matrix(   df = copy_track,   num_notes = 128,   intervals_per_bar = 48,   separate = TRUE )"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"probability","dir":"Articles","previous_headings":"","what":"probability","title":"scratchpad","text":"","code":"feature_probs <- get_feature_probs(midi_matrix = music_matrix$pitch_by_time_matrix)  mean_note_density <- get_mean_note_density(midi_matrix = music_matrix$pitch_by_time_matrix)  new_features <- new_features_from_probs(probs = feature_probs,                                         density = mean_note_density,                                         examples = 1)  new_matrix <- feature_vector_to_matrix(vec = new_features,                                        num_notes = 128)"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"transform-out","dir":"Articles","previous_headings":"","what":"transform out","title":"scratchpad","text":"","code":"midi_time_df <- matrix_to_midi_time(midi_matrix = new_matrix,                                     smallest_time_unit = 8,                                     note_off_length = 32)  meta_messages_df <- get_midi_meta_df(track_0)  meta_messages_df <- set_midi_tempo_meta(meta_messages_df,update_tempo = 500000)  split_meta_messages_df <- split_meta_df(meta_messages_df)  new_midi_df <- matrix_to_midi_track(midi_time_df = midi_time_df,                                     split_meta_list = split_meta_messages_df,                                     channel = 0,                                     velocity = 64)"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"export","dir":"Articles","previous_headings":"","what":"export","title":"scratchpad","text":"keeping script now.","code":"# update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(new_midi_df)  #write midi file to disk miditapyr_object$write_file(\"try_write.mid\")  ######### # bounce to mp3 with fluid synth  track_name <- \"note_wiggler_mario\"  wav_name <- paste0(track_name,\".wav\") midi_name <- paste0(track_name,\".mid\") mp3_name <- paste0(track_name,\".mp3\")  # synthesize midi file to wav with fluid synth system_command <- glue::glue('fluidsynth -F {wav_name} ~/Library/Audio/Sounds/Banks/nintendo_soundfont.sf2 {midi_name}') system(system_command)  # convert wav to mp3 av::av_audio_convert(wav_name,mp3_name)  # clean up and delete wav if(file.exists(wav_name)){   file.remove(wav_name) }"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"midi_to_matrix","dir":"Articles","previous_headings":"","what":"midi_to_matrix","title":"scratchpad","text":"Haven’t turned function yet. Fairly straightforward way convert whole midi file single matrix (like piano roll).","code":"mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)  all_midi <- midi_df_to_matrix(midi_df,track=0)"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"reshape-a-piano-roll-matrix","dir":"Articles","previous_headings":"","what":"reshape a piano roll matrix","title":"scratchpad","text":"","code":"new_shape <- reshape_piano_roll(all_midi,48) bresenhamEuclidean <- function(onsets, totalPulses, start = 1) {   previous <- start   pattern <- c()      for (i in 0:(totalPulses-1)) {     xVal <- floor((onsets / totalPulses) * (i))     pattern <- c(pattern, ifelse(xVal == previous, 0, 1))     previous <- xVal   }      return(pattern) }  # Example usage: onsets <- 10 totalPulses <- 32 euclidean_rhythm <- bresenhamEuclidean(onsets, totalPulses) print(euclidean_rhythm)"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"midi-notes","dir":"Articles","previous_headings":"","what":"midi notes","title":"scratchpad","text":"","code":"midi_notes <- pyramidi::midi_defs %>%   rowwise() %>%   mutate(note_letter = unlist(strsplit(as.character(note_name),\"-\"))[1],          octave = unlist(strsplit(as.character(note_name),\"-\"))[2])  midi_notes <- tibble(notes = rep(midi_notes[1:12,]$note_letter,11)[1:128],                      octaves = rep(-1:9, each = 12)[1:128],                      midi_number = 0:127 )"},{"path":"https://crumplab.com/midiblender/articles/scratchpad.html","id":"midi-construct","dir":"Articles","previous_headings":"","what":"Midi construct","title":"scratchpad","text":"http://www.music.mcgill.ca/~ich/classes/mumt306/StandardMIDIfileformat.html","code":"mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)  midi_df <- midiblender::set_midi_tempo_midi_df(midi_df)   meta_create_empty() %>%   meta_add_track_name(name = \"bass line\") %>%   meta_add_tempo() %>%   meta_add_time_sig() %>%   program_change_add()"},{"path":"https://crumplab.com/midiblender/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew J. C. Crump. Author, maintainer.","code":""},{"path":"https://crumplab.com/midiblender/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Crump MJC (2024). “midiblender: Experiments genRative MIDI mangling.”","code":"@Misc{,   title = {midiblender: Experiments in genRative MIDI mangling},   author = {Matthew J. C. Crump},   year = {2024}, }"},{"path":"https://crumplab.com/midiblender/index.html","id":"midiblender-","dir":"","previous_headings":"","what":"midiblender: Experiments in genRative MIDI mangling","title":"midiblender: Experiments in genRative MIDI mangling","text":"goal midiblender mangle midi files R listen happens. experimental, use frustration package. ’m writing use cases, using R package format helps clarify track goals ’m chasing . R package, perhaps confused one. ’m sharing fun case others find useful.","code":""},{"path":"https://crumplab.com/midiblender/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"midiblender: Experiments in genRative MIDI mangling","text":"can install midiblender like : Aspects package rely pyramidi, also experimental lifecycle. package wraps python libraries (miditapyr mido) handle midi import export. See pyramidi documentation information necessary install work.","code":"## install remotes package if it's not already if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") }  ## install dev version of rtweettree from github remotes::install_github(\"CrumpLab/midiblender\")"},{"path":"https://crumplab.com/midiblender/index.html","id":"to-do","dir":"","previous_headings":"","what":"To Do","title":"midiblender: Experiments in genRative MIDI mangling","text":"conceptual getting started document Mangling matrices Basic MIDI mangling functions -Midi data frame constructors dplyr Slowly adding examples primary style development trying things fun listening …side eye toward posterity case mangling pattern seems like tool ’d want use .","code":""},{"path":"https://crumplab.com/midiblender/index.html","id":"thanks-to","dir":"","previous_headings":"","what":"Thanks to","title":"midiblender: Experiments in genRative MIDI mangling","text":"Thanks R community building wonderful tools. Special thanks Urs Wilke pyramidi, helped get speed quickly.","code":""},{"path":[]},{"path":"https://crumplab.com/midiblender/reference/add_bars_to_copy_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Bars to Copy of Dataframe — add_bars_to_copy_df","title":"Add Bars to Copy of Dataframe — add_bars_to_copy_df","text":"function modifies copy dataframe df adding new columns related time markers bars metric_tibble. Rows dataframe iterated upon set values new columns based matching time_steps metric_tibble.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_bars_to_copy_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Bars to Copy of Dataframe — add_bars_to_copy_df","text":"","code":"add_bars_to_copy_df(df, metric_tibble)"},{"path":"https://crumplab.com/midiblender/reference/add_bars_to_copy_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Bars to Copy of Dataframe — add_bars_to_copy_df","text":"df data frame needs additional time marker bar related data. columns data frame can vary, must contain 'total_time' column. Usually received copy_and_extend_midi_df(). metric_tibble tibble columns 'time_steps', 'bars', 'bar_steps'. tibble provides metrics used add new marker bar data data frame df. Created make_metric_tibble().","code":""},{"path":"https://crumplab.com/midiblender/reference/add_bars_to_copy_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Bars to Copy of Dataframe — add_bars_to_copy_df","text":"data frame copy input data frame df, three additional columns: 'time_markers', 'bars', 'bar_steps'. 'time_markers' populated index match 'total_time' df 'time_steps' metric_tibble. bars' 'bar_steps' populated corresponding values metric_tibble based matching 'time_steps'.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_bars_to_copy_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Bars to Copy of Dataframe — add_bars_to_copy_df","text":"","code":"if (FALSE) { copy_track <- copy_and_extend_midi_df(midi_df, track_num = 0) metric_tibble <- make_metric_tibble(copy_track, ticks_per_beat = 96, bars=48,smallest_tick=8) copy_track <- add_bars_to_copy_df(copy_track,metric_tibble) }"},{"path":"https://crumplab.com/midiblender/reference/add_control_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Add control_change message to df — add_control_change","title":"Add control_change message to df — add_control_change","text":"Intended use dplyr style pipe. Adds control_change message midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_control_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add control_change message to df — add_control_change","text":"","code":"add_control_change(   df,   i_track = 0,   type = \"control_change\",   time = 0,   channel = 0,   control = 0,   value = 0,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_control_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add control_change message to df — add_control_change","text":"df midi_df add row i_track integer, default = 0 type character, default = \"control_change\" time integer, default = 0 channel integer, default = 0 control integer, default = 0 value integer, default = 0 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_control_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add control_change message to df — add_control_change","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_control_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add control_change message to df — add_control_change","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/add_meta_end_of_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Add end_of_track message to df — add_meta_end_of_track","title":"Add end_of_track message to df — add_meta_end_of_track","text":"Intended use dplyr style pipe. Adds end_of_track message meta header.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_end_of_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add end_of_track message to df — add_meta_end_of_track","text":"","code":"add_meta_end_of_track(   meta_df,   i_track = 0,   type = \"end_of_track\",   time = 0,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_meta_end_of_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add end_of_track message to df — add_meta_end_of_track","text":"meta_df midi_df add i_track integer, default = 0 type character, default = \"end_of_track\" time integer, default = 0 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_end_of_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add end_of_track message to df — add_meta_end_of_track","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_end_of_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add end_of_track message to df — add_meta_end_of_track","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/add_meta_tempo.html","id":null,"dir":"Reference","previous_headings":"","what":"Add set_tempo message to df — add_meta_tempo","title":"Add set_tempo message to df — add_meta_tempo","text":"Intended use dplyr style pipe. Adds set_tempo message meta header.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_tempo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add set_tempo message to df — add_meta_tempo","text":"","code":"add_meta_tempo(   meta_df,   i_track = 0,   type = \"set_tempo\",   time = 0,   tempo = 5e+05,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_meta_tempo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add set_tempo message to df — add_meta_tempo","text":"meta_df midi_df add i_track integer, default = 0 type character, default = \"set_tempo\" time integer, default = 0 tempo integer, default = 500000 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_tempo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add set_tempo message to df — add_meta_tempo","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_tempo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add set_tempo message to df — add_meta_tempo","text":"","code":"if (FALSE) { new_midi_df <- create_empty_midi_df() %>%   add_meta_track_name(name = \"bass\") %>%   add_meta_tempo(tempo = 500000) }"},{"path":"https://crumplab.com/midiblender/reference/add_meta_time_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Add time_signature message to df — add_meta_time_sig","title":"Add time_signature message to df — add_meta_time_sig","text":"Intended use dplyr style pipe. Adds time_signature message meta header.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_time_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add time_signature message to df — add_meta_time_sig","text":"","code":"add_meta_time_sig(   meta_df,   i_track = 0,   type = \"time_signature\",   time = 0,   numerator = 4,   denominator = 4,   clocks_per_click = 36,   notated_32nd_notes_per_beat = 8,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_meta_time_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add time_signature message to df — add_meta_time_sig","text":"meta_df midi_df add i_track integer, default = 0 type character, default = \"time_signature\" time integer, default = 0 numerator integer, default = 4 denominator integer, default = 4 clocks_per_click integer, default = 36 notated_32nd_notes_per_beat integer, default = 8 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_time_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add time_signature message to df — add_meta_time_sig","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_time_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add time_signature message to df — add_meta_time_sig","text":"","code":"if (FALSE) { new_midi_df <- create_empty_midi_df() %>%   add_meta_track_name(name = \"bass\") %>%   add_meta_tempo(tempo = 500000) %>%   add_meta_time_sig() }"},{"path":"https://crumplab.com/midiblender/reference/add_meta_track_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Add track name message to df — add_meta_track_name","title":"Add track name message to df — add_meta_track_name","text":"Intended use dplyr style pipe. Adds track_name message meta header.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_track_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add track name message to df — add_meta_track_name","text":"","code":"add_meta_track_name(   meta_df,   i_track = 0,   type = \"track_name\",   name = \"\",   time = 0,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_meta_track_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add track name message to df — add_meta_track_name","text":"meta_df midi_df add i_track integer, default = 0 type character, default = \"track_name\" name character, default = \"\" time integer, default = 0 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_track_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add track name message to df — add_meta_track_name","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_meta_track_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add track name message to df — add_meta_track_name","text":"","code":"if (FALSE) { new_midi_df <- create_empty_midi_df() %>%   add_meta_track_name(name = \"bass\") }"},{"path":"https://crumplab.com/midiblender/reference/add_midi_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a midi message to a midi_df — add_midi_message","title":"Add a midi message to a midi_df — add_midi_message","text":"Intended use dplyr style pipe. Adds midi message midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_midi_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a midi message to a midi_df — add_midi_message","text":"","code":"add_midi_message(   df,   i_track = 0,   meta = FALSE,   type = \"\",   name = NA,   time = 0,   numerator = NaN,   denominator = NaN,   clocks_per_click = NaN,   notated_32nd_notes_per_beat = NaN,   program = NaN,   channel = NaN,   control = NaN,   value = NaN,   note = NaN,   velocity = NaN,   tempo = NaN,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_midi_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a midi message to a midi_df — add_midi_message","text":"df midi_df add row i_track integer, default = 0 meta logical, default = FALSE type character, default = \"control_change\" name character, default = NA time integer, default = 0 numerator integer, default = NaN denominator integer, default = NaN clocks_per_click integer, default = NaN notated_32nd_notes_per_beat integer, default = NaN program integer, default = NaN channel integer, default = NaN control integer, default = NaN value integer, default = NaN note integer, default = NaN velocity integer, default = NaN tempo integer, default = NaN ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_midi_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a midi message to a midi_df — add_midi_message","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_midi_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a midi message to a midi_df — add_midi_message","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/add_note_off.html","id":null,"dir":"Reference","previous_headings":"","what":"Add note_off message to df — add_note_off","title":"Add note_off message to df — add_note_off","text":"Intended use dplyr style pipe. Adds note_off message midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_note_off.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add note_off message to df — add_note_off","text":"","code":"add_note_off(   df,   i_track = 0,   type = \"note_off\",   time = 0,   channel = 0,   note = 0,   velocity = 0,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_note_off.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add note_off message to df — add_note_off","text":"df midi_df add row i_track integer, default = 0 type character, default = \"note_off\" time integer, default = 0 channel integer, default = 0 note integer, default = 60 velocity integer, default = 64 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_note_off.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add note_off message to df — add_note_off","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_note_off.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add note_off message to df — add_note_off","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/add_note_on.html","id":null,"dir":"Reference","previous_headings":"","what":"Add note_on message to df — add_note_on","title":"Add note_on message to df — add_note_on","text":"Intended use dplyr style pipe. Adds note_on message midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_note_on.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add note_on message to df — add_note_on","text":"","code":"add_note_on(   df,   i_track = 0,   type = \"note_on\",   time = 0,   channel = 0,   note = 0,   velocity = 0,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_note_on.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add note_on message to df — add_note_on","text":"df midi_df add row i_track integer, default = 0 type character, default = \"note_on\" time integer, default = 0 channel integer, default = 0 note integer, default = 60 velocity integer, default = 64 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_note_on.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add note_on message to df — add_note_on","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_note_on.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add note_on message to df — add_note_on","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/add_program_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Add program_change message to df — add_program_change","title":"Add program_change message to df — add_program_change","text":"Intended use dplyr style pipe. Adds program_change message midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/add_program_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add program_change message to df — add_program_change","text":"","code":"add_program_change(   df,   i_track = 0,   type = \"program_change\",   time = 0,   program = 0,   channel = 0,   ... )"},{"path":"https://crumplab.com/midiblender/reference/add_program_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add program_change message to df — add_program_change","text":"df midi_df add row i_track integer, default = 0 type character, default = \"program_change\" time integer, default = 0 program integer, default = 0 channel integer, default = 0 ... send additional args dplyr::add_row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_program_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add program_change message to df — add_program_change","text":"new row","code":""},{"path":"https://crumplab.com/midiblender/reference/add_program_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add program_change message to df — add_program_change","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/bresenham_euclidean.html","id":null,"dir":"Reference","previous_headings":"","what":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","title":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","text":"algorithm evenly distributes specified number beats total specified number steps, returning binary vector 1s indicate occurrence beat.","code":""},{"path":"https://crumplab.com/midiblender/reference/bresenham_euclidean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","text":"","code":"bresenham_euclidean(beats, steps, start = 1)"},{"path":"https://crumplab.com/midiblender/reference/bresenham_euclidean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","text":"beats Integer, number beats distribute. steps Integer, total number steps across beats distributed. start Integer, starting value sequence. Default 1.","code":""},{"path":"https://crumplab.com/midiblender/reference/bresenham_euclidean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","text":"numerical vector size steps containing 1s beats present 0s elsewhere.","code":""},{"path":"https://crumplab.com/midiblender/reference/bresenham_euclidean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","text":"Converted R discussions Euclidean Algorithms post https://medium.com/code-music-noise/euclidean-rhythms-391d879494df. See also Toussaint, Godfried. 2005. “Euclidean Algorithm Generates Traditional Musical Rhythms.” , 4756. https://archive.bridgesmathart.org/2005/bridges2005-47.html","code":""},{"path":"https://crumplab.com/midiblender/reference/bresenham_euclidean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bresenham's algorithm for Euclidean rhythm generation — bresenham_euclidean","text":"","code":"if (FALSE) { bresenham_euclidean(5, 16) bresenham_euclidean(7, 20, 2) }"},{"path":"https://crumplab.com/midiblender/reference/copy_and_extend_midi_df.html","id":null,"dir":"Reference","previous_headings":"","what":"copy_and_extend_midi_df — copy_and_extend_midi_df","title":"copy_and_extend_midi_df — copy_and_extend_midi_df","text":"Copy midi_df, add cumulative time column, keep note_on messages","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_and_extend_midi_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"copy_and_extend_midi_df — copy_and_extend_midi_df","text":"","code":"copy_and_extend_midi_df(midi_df, track_num = 0)"},{"path":"https://crumplab.com/midiblender/reference/copy_and_extend_midi_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"copy_and_extend_midi_df — copy_and_extend_midi_df","text":"midi_df dataframe representing midi file returned midi_to_object(). dataframe must contain columns named 'i_track', 'type', 'time', 'i_track' track number, 'type' indicates type event (e.g., \"note_on\" \"note_off\"), 'time' time point event. track_num integer indicating track number processed. Default 0.","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_and_extend_midi_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"copy_and_extend_midi_df — copy_and_extend_midi_df","text":"modified dataframe additional 'total_time' column filtered \"note_on\" type.","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_and_extend_midi_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"copy_and_extend_midi_df — copy_and_extend_midi_df","text":"function filters modifies input midi dataframe, midi_df provided midi_to_object. first filters data keep rows specified track_num \"note_on\" \"note_off\". adds total_time column accumulates time variable. Lastly, filters return \"note_on\" rows. general workflow make copy midi_df, comes pyramidi::miditapyr$unnest_midi(message_list_df), modify copy additional columns useful transforming MIDI messages R data-wranglind techniques. modified copy stripped additional columns, returned state can imported back miditapyr_object, can updated new midi information using miditapyr_object$midi_frame_unnested$update_unnested_mf(), written file using miditapyr_object$write_file(\"rando_mario.mid\").","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_and_extend_midi_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"copy_and_extend_midi_df — copy_and_extend_midi_df","text":"","code":"if (FALSE) { modified_midi_df <- copy_and_extend_midi_df(midi_df, track_num = 0) }"},{"path":"https://crumplab.com/midiblender/reference/copy_midi_df_track.html","id":null,"dir":"Reference","previous_headings":"","what":"copy single track df within midi_df — copy_midi_df_track","title":"copy single track df within midi_df — copy_midi_df_track","text":"Copy midi_df, add cumulative time column, keep note_on messages","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_midi_df_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"copy single track df within midi_df — copy_midi_df_track","text":"","code":"copy_midi_df_track(midi_df, track_num = 0)"},{"path":"https://crumplab.com/midiblender/reference/copy_midi_df_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"copy single track df within midi_df — copy_midi_df_track","text":"midi_df dataframe representing midi file returned midi_to_object(). track_num integer indicating track number select. Default 0.","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_midi_df_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"copy single track df within midi_df — copy_midi_df_track","text":"filtered data frame containing messages selected track","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_midi_df_track.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"copy single track df within midi_df — copy_midi_df_track","text":"function filters imported midi_df specific track makes copy midi_df. imported midi_df comes midi_to_object() function, represents output pyramidi::miditapyr$unnest_midi(message_list_df). make copies sometimes caution. Currently, used preserve meta messages imported midi files.","code":""},{"path":"https://crumplab.com/midiblender/reference/copy_midi_df_track.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"copy single track df within midi_df — copy_midi_df_track","text":"","code":"if (FALSE) { copy_track_0 = copy_midi_df_track(midi_df, track_num = 0) }"},{"path":"https://crumplab.com/midiblender/reference/create_empty_midi_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a midi_df tibble with column headers — create_empty_midi_df","title":"Initialize a midi_df tibble with column headers — create_empty_midi_df","text":"function creates empty tibble containing specific columns midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/create_empty_midi_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a midi_df tibble with column headers — create_empty_midi_df","text":"","code":"create_empty_midi_df()"},{"path":"https://crumplab.com/midiblender/reference/create_empty_midi_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a midi_df tibble with column headers — create_empty_midi_df","text":"tibble object columns different types.","code":""},{"path":"https://crumplab.com/midiblender/reference/create_empty_midi_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a midi_df tibble with column headers — create_empty_midi_df","text":"columns include i_track (integer), meta (logical), type (character), name (character), time (integer), numerator (integer), denominator (integer), clocks_per_click (integer), notated_32nd_notes_per_beat (integer), program (integer), channel (integer), control (integer), value (integer), note (integer), velocity (integer), tempo (integer).","code":""},{"path":"https://crumplab.com/midiblender/reference/create_empty_midi_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a midi_df tibble with column headers — create_empty_midi_df","text":"","code":"if (FALSE) { new_midi_df <- create_empty_midi_df() }"},{"path":"https://crumplab.com/midiblender/reference/create_midi_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"create_midi_matrix function — create_midi_matrix","title":"create_midi_matrix function — create_midi_matrix","text":"function creates MIDI matrix given musical score.","code":""},{"path":"https://crumplab.com/midiblender/reference/create_midi_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_midi_matrix function — create_midi_matrix","text":"","code":"create_midi_matrix(   df,   num_notes = 128,   intervals_per_bar = 48,   separate = FALSE )"},{"path":"https://crumplab.com/midiblender/reference/create_midi_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_midi_matrix function — create_midi_matrix","text":"df data.frame containing input MIDI notation. df least columns named 'bars', 'note', 'bar_steps'. 'bars' indicates bar note occurs , note' indicates pitch note, bar_steps' shows time position within bar note occurs. num_notes integer determining size MIDI note bins. Default 128. intervals_per_bar integer specifying number intervals split bar matrix preparation. Default 48, corresponds 48th notes (every quarter beat 4/4 signature). separate logical value indicating function return single concatenated matrix (FALSE) list separate pitch, time, pitch time matrices (TRUE). Default FALSE.","code":""},{"path":"https://crumplab.com/midiblender/reference/create_midi_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_midi_matrix function — create_midi_matrix","text":"separate = FALSE, matrix MIDI note data rows representing bars, columns representing 1) counts notes pitch bins, 2) counts notes time bins, 3) matrix 'flattened' vector pitch time data. separate = TRUE, list containing separate matrices pitch, time, pitch time.","code":""},{"path":"https://crumplab.com/midiblender/reference/create_midi_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create_midi_matrix function — create_midi_matrix","text":"","code":"if (FALSE) { copy_track <- copy_and_extend_midi_df(midi_df, track_num = 0) metric_tibble <- make_metric_tibble(copy_track, ticks_per_beat = 96, bars=48,smallest_tick=8) copy_track <- add_bars_to_copy_df(copy_track,metric_tibble) music_matrix <- create_midi_matrix(copy_track,128,48) }"},{"path":"https://crumplab.com/midiblender/reference/feature_vector_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert feature vector to matrix — feature_vector_to_matrix","title":"Convert feature vector to matrix — feature_vector_to_matrix","text":"function takes feature vector number notes, returns matrix. note row matrix.","code":""},{"path":"https://crumplab.com/midiblender/reference/feature_vector_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert feature vector to matrix — feature_vector_to_matrix","text":"","code":"feature_vector_to_matrix(vec, num_notes)"},{"path":"https://crumplab.com/midiblender/reference/feature_vector_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert feature vector to matrix — feature_vector_to_matrix","text":"vec vector features. length vector must divisible number notes. num_notes integer specifying number notes. number rows returned matrix.","code":""},{"path":"https://crumplab.com/midiblender/reference/feature_vector_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert feature vector to matrix — feature_vector_to_matrix","text":"matrix num_notes rows length(vec)/num_notes columns.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_feature_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Feature Probabilities — get_feature_probs","title":"Get Feature Probabilities — get_feature_probs","text":"function calculates probability feature proportion total. sums values MIDI matrix, calculates summary column(feature), finally computes probability feature dividing column summary total summary.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_feature_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Feature Probabilities — get_feature_probs","text":"","code":"get_feature_probs(midi_matrix)"},{"path":"https://crumplab.com/midiblender/reference/get_feature_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Feature Probabilities — get_feature_probs","text":"midi_matrix numeric note time feature matrix.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_feature_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Feature Probabilities — get_feature_probs","text":"numeric vector containing probabilities feature. length vector equal number features (columns) input MIDI matrix.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_feature_probs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Feature Probabilities — get_feature_probs","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/get_mean_note_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean note density of a midi matrix — get_mean_note_density","title":"Compute the mean note density of a midi matrix — get_mean_note_density","text":"function takes midi matrix returns rounded mean sum rows. Note round function used round nearest whole number.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_mean_note_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean note density of a midi matrix — get_mean_note_density","text":"","code":"get_mean_note_density(midi_matrix)"},{"path":"https://crumplab.com/midiblender/reference/get_mean_note_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean note density of a midi matrix — get_mean_note_density","text":"midi_matrix numerical matrix rows represents MIDI notes, sum row represents note density.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_mean_note_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean note density of a midi matrix — get_mean_note_density","text":"rounded integer represents mean note density.","code":""},{"path":"https://crumplab.com/midiblender/reference/get_midi_meta_df.html","id":null,"dir":"Reference","previous_headings":"","what":"get meta messages from a track_df — get_midi_meta_df","title":"get meta messages from a track_df — get_midi_meta_df","text":"get meta messages track_df","code":""},{"path":"https://crumplab.com/midiblender/reference/get_midi_meta_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get meta messages from a track_df — get_midi_meta_df","text":"","code":"get_midi_meta_df(track_df)"},{"path":"https://crumplab.com/midiblender/reference/get_midi_meta_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get meta messages from a track_df — get_midi_meta_df","text":"track_df filtered midi_df selected i_track","code":""},{"path":"https://crumplab.com/midiblender/reference/get_midi_meta_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get meta messages from a track_df — get_midi_meta_df","text":"tibble meta messages","code":""},{"path":"https://crumplab.com/midiblender/reference/make_metric_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","title":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","text":"Create dataframe helpful timing metrics midi_df","code":""},{"path":"https://crumplab.com/midiblender/reference/make_metric_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","text":"","code":"make_metric_tibble(df, ticks_per_beat, bars = NULL, smallest_tick = NULL)"},{"path":"https://crumplab.com/midiblender/reference/make_metric_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","text":"df dataframe containing least 'time' column 'total_time' column. Usually df copy_and_extend_midi_df() ticks_per_beat Integer specifying number ticks per beat bars Integer specifying number bars. parameter NULL, compute assuming 4/4 meter. Default NULL. smallest_tick Numeric. smallest unit time (beats) represented output dataframe. NULL, compute smallest observed unit 'time' column. Default NULL.","code":""},{"path":"https://crumplab.com/midiblender/reference/make_metric_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","text":"dataframe row represents one 'tick' (.e., fundamental temporal unit), columns represent 'tick' timestamp (time_steps), corresponding bar number (bars), step within bar (bar_steps).","code":""},{"path":"https://crumplab.com/midiblender/reference/make_metric_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","text":"MIDI files contain minimal timing information. function computes additional timing metrics midi_df useful later transformations. MIDI files midi_df imported pyramidi::miditapyr$MidiFrames() represent timing information terms relative time since last message, cumulative time. Messages MIDI file ordered chronological time. first message sent occurs tick 0. next message occurred 30 ticks later, time recorded 30. next message 5 ticks later, time recorded 5. another message sent time, recorded next message time 0, relative last message. MIDI files ticks per beat parameter. example, one beat (quarter note 4/4 time) 96 MIDI ticks. possible increase resolution single beat given additional ticks. function attempts compute additional timing information new tibble, cumulative ticks, bars, intervals within bar. tibble can joined midi_df aid various transformation tasks.","code":""},{"path":"https://crumplab.com/midiblender/reference/make_metric_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dataframe with helpful timing metrics from a midi_df — make_metric_tibble","text":"","code":"if (FALSE) { copy_track <- copy_and_extend_midi_df(midi_df, track_num = 0) metric_tibble <- make_metric_tibble(copy_track, ticks_per_beat = 96, bars=48,smallest_tick=8)  }"},{"path":"https://crumplab.com/midiblender/reference/mangle_note_wiggler.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly offset individual notes by a vector of semitones — mangle_note_wiggler","title":"Randomly offset individual notes by a vector of semitones — mangle_note_wiggler","text":"function randomly changes individual note values MIDI data frame certain number semitones. also ensures note values stay within MIDI range (0-127) mutes notes fall outside range.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_note_wiggler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly offset individual notes by a vector of semitones — mangle_note_wiggler","text":"","code":"mangle_note_wiggler(midi_df, semitones = c(2, 7), keep_same = 2)"},{"path":"https://crumplab.com/midiblender/reference/mangle_note_wiggler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly offset individual notes by a vector of semitones — mangle_note_wiggler","text":"midi_df midi dataframe, usually imported midi_to_object(). semitones numeric vector. default c(2,7). function automatically appends negative values well. keep_sam integer, number 0s add semitpones vector, value selected given note shifted","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_note_wiggler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly offset individual notes by a vector of semitones — mangle_note_wiggler","text":"data frame structure midi_df, note velocity columns modified according randomly sampled note offsets. notes fall outside 0-127 range velocity set 0 (muted), note value set 127.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_note_wiggler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly offset individual notes by a vector of semitones — mangle_note_wiggler","text":"","code":"if (FALSE) { # import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv)  # make sure midi_df has a tempo midi_df <- midiblender::set_midi_tempo_midi_df(midi_df)  # apply random note offsets copy_df <- mangle_note_wiggler(midi_df, c(4,7), keep_same = 2)  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(copy_df)  #write midi file to disk miditapyr_object$write_file(\"note_wiggler_mario.mid\") }"},{"path":"https://crumplab.com/midiblender/reference/mangle_positive_timing.html","id":null,"dir":"Reference","previous_headings":"","what":"Mangle Positive Timing Function — mangle_positive_timing","title":"Mangle Positive Timing Function — mangle_positive_timing","text":"function adds random jitter time column midi_df ensures times positive. samples jitter values uniform distribution, adds original time series. negative times resulting jitter set 0.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_positive_timing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mangle Positive Timing Function — mangle_positive_timing","text":"","code":"mangle_positive_timing(x, ticks_amount = 5)"},{"path":"https://crumplab.com/midiblender/reference/mangle_positive_timing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mangle Positive Timing Function — mangle_positive_timing","text":"x numeric vector representing time points. ticks_amount range uniform distribution sample jitter. Default 5.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_positive_timing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mangle Positive Timing Function — mangle_positive_timing","text":"numeric vector length x, representing 'mangled' time series.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_positive_timing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mangle Positive Timing Function — mangle_positive_timing","text":"function can used dplyr modify midi_df. result similar \"humanizing\" timing. Depending amount jitter, small random ticks added timing messages. function jitter simulatenous messages, chords become spread triads.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_positive_timing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mangle Positive Timing Function — mangle_positive_timing","text":"","code":"if (FALSE) { mario <- midi_to_object(\"all_overworld.mid\") #import midi list2env(mario, .GlobalEnv) #send object to global environment  midi_df %>% mutate(time = case_when(   meta == FALSE ~ mangle_positive_timing(time, ticks_amount = 5),   meta == TRUE ~ time)   ) -> copy_df  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(copy_df)  # write midi file to disk miditapyr_object$write_file(\"jitter_mario.mid\") }"},{"path":"https://crumplab.com/midiblender/reference/mangle_transpose.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose MIDI Data — mangle_transpose","title":"Transpose MIDI Data — mangle_transpose","text":"function changes note values MIDI data frame certain number semitones. also ensures note values stay within MIDI range (0-127) mutes notes fall outside range.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_transpose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose MIDI Data — mangle_transpose","text":"","code":"mangle_transpose(midi_df, semitones = 0)"},{"path":"https://crumplab.com/midiblender/reference/mangle_transpose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose MIDI Data — mangle_transpose","text":"midi_df midi dataframe, usually imported midi_to_object(). semitones Numeric. number semitones transpose note column. meta column FALSE, function add subtract number original note value. Default 0, means transposition occur.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_transpose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transpose MIDI Data — mangle_transpose","text":"data frame structure midi_df, note velocity columns modified according transposition MIDI range rules. notes fall outside 0-127 range velocity set 0 (muted), note value set 127.","code":""},{"path":"https://crumplab.com/midiblender/reference/mangle_transpose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose MIDI Data — mangle_transpose","text":"","code":"if (FALSE) { # import midi mario <- midi_to_object(\"all_overworld.mid\") list2env(mario, .GlobalEnv) #send objects to Global environment  # apply transpose copy_df <- mangle_transpose(midi_df, -10)  # update miditapyr df miditapyr_object$midi_frame_unnested$update_unnested_mf(copy_df) #write midi file to disk miditapyr_object$write_file(\"transpose_mario.mid\") }"},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a matrix representation of a MIDI sequence back to MIDI timings — matrix_to_midi_time","title":"Convert a matrix representation of a MIDI sequence back to MIDI timings — matrix_to_midi_time","text":"function reads binary matrix pitch classes rows temporal locations columns (1s represent note onsets, 0s represent absences notes). converts binary representation MIDI timings, .e. time (ticks) note onsets note offsets.","code":""},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a matrix representation of a MIDI sequence back to MIDI timings — matrix_to_midi_time","text":"","code":"matrix_to_midi_time(midi_matrix, smallest_time_unit = 8, note_off_length = 32)"},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a matrix representation of a MIDI sequence back to MIDI timings — matrix_to_midi_time","text":"midi_matrix binary matrix, pitch classes rows temporal location columns. cell value either 1 (note onset) 0 (notes absence). smallest_time_unit Integer, specifying smallest time unit (MIDI ticks) used binary matrix representation. Default 8 ticks. note_off_length Numeric, specifying fixed note duration MIDI ticks used notes sequence. Default 32 ticks.","code":""},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a matrix representation of a MIDI sequence back to MIDI timings — matrix_to_midi_time","text":"dataframe four columns: note_num, note_id, type, time. note_num MIDI pitch note. note_id unique identifier note. type whether event note onset (\"note_on\") note offset (\"note_off\"). time time (MIDI ticks) since last event.","code":""},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a matrix representation of a MIDI sequence back to MIDI timings — matrix_to_midi_time","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_track.html","id":null,"dir":"Reference","previous_headings":"","what":"matrix_to_midi_track function — matrix_to_midi_track","title":"matrix_to_midi_track function — matrix_to_midi_track","text":"function converts MIDI time dataframe MIDI track dataframe, given specific channel velocity. subsequently writes note /, time, note number messages.","code":""},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"matrix_to_midi_track function — matrix_to_midi_track","text":"","code":"matrix_to_midi_track(midi_time_df, split_meta_list, channel = 0, velocity = 64)"},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"matrix_to_midi_track function — matrix_to_midi_track","text":"midi_time_df dataframe containing MIDI time information. split_meta_list list two data frames, first contains metadata start MIDI track second contains metadata end MIDI track. channel Integer value representing MIDI channel. Default 0. velocity Integer value representing velocity MIDI notes. Default 64.","code":""},{"path":"https://crumplab.com/midiblender/reference/matrix_to_midi_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"matrix_to_midi_track function — matrix_to_midi_track","text":"updated MIDI track data frame includes note /, time, note number messages.","code":""},{"path":"https://crumplab.com/midiblender/reference/meta_create_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a midi_df tibble with column headers — meta_create_empty","title":"Initialize a midi_df tibble with column headers — meta_create_empty","text":"function creates empty tibble containing specific columns midi_df.","code":""},{"path":"https://crumplab.com/midiblender/reference/meta_create_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a midi_df tibble with column headers — meta_create_empty","text":"","code":"meta_create_empty()"},{"path":"https://crumplab.com/midiblender/reference/meta_create_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a midi_df tibble with column headers — meta_create_empty","text":"tibble object columns different types.","code":""},{"path":"https://crumplab.com/midiblender/reference/meta_create_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a midi_df tibble with column headers — meta_create_empty","text":"columns include i_track (integer), meta (logical), type (character), name (character), time (integer), numerator (integer), denominator (integer), clocks_per_click (integer), notated_32nd_notes_per_beat (integer), program (integer), channel (integer), control (integer), value (integer), note (integer), velocity (integer), tempo (integer).","code":""},{"path":"https://crumplab.com/midiblender/reference/meta_create_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a midi_df tibble with column headers — meta_create_empty","text":"","code":"if (FALSE) { new_midi_df <- meta_create_empty() }"},{"path":"https://crumplab.com/midiblender/reference/midi_df_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MIDI Data Frame to piano roll Matrix — midi_df_to_matrix","title":"Convert MIDI Data Frame to piano roll Matrix — midi_df_to_matrix","text":"function takes data frame obtained MIDI file converts binary matrix representation, time frames columns MIDI note numbers (0-127) rows.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_df_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MIDI Data Frame to piano roll Matrix — midi_df_to_matrix","text":"","code":"midi_df_to_matrix(midi_df, track = 0)"},{"path":"https://crumplab.com/midiblender/reference/midi_df_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MIDI Data Frame to piano roll Matrix — midi_df_to_matrix","text":"midi_df data frame MIDI events, midi_to_object() track track number converted matrix. Default 0.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_df_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MIDI Data Frame to piano roll Matrix — midi_df_to_matrix","text":"binary matrix column indices represent time frames row indices represent MIDI note numbers. entry matrix 1 corresponding note corresponding time, 0 otherwise.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_df_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert MIDI Data Frame to piano roll Matrix — midi_df_to_matrix","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/midi_to_object.html","id":null,"dir":"Reference","previous_headings":"","what":"midi_to_object Function — midi_to_object","title":"midi_to_object Function — midi_to_object","text":"Import MIDI data transform several useful R objects.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_to_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"midi_to_object Function — midi_to_object","text":"","code":"midi_to_object(file_path)"},{"path":"https://crumplab.com/midiblender/reference/midi_to_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"midi_to_object Function — midi_to_object","text":"file_path character string specifying path MIDI file.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_to_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"midi_to_object Function — midi_to_object","text":"list MIDI import objects, includes: miditapyr_object: miditapyr object representing complete MIDI file. mido_object: mido object representing MIDI file. message_list_df: data frame MIDI messages. ticks_per_beat: number ticks per beat. midi_df: data frame MIDI messages, fully unnested.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_to_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"midi_to_object Function — midi_to_object","text":"mostly wraps pyramidi functions call miditapyr mido.","code":""},{"path":"https://crumplab.com/midiblender/reference/midi_to_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"midi_to_object Function — midi_to_object","text":"","code":"if (FALSE) {   midi_objects <- midi_to_object(\"path_to_your_midi_file.mid\")   list2env(midi_objects, .GlobalEnv) # add to global environment }"},{"path":"https://crumplab.com/midiblender/reference/new_features_from_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create New Features Based on Probabilities — new_features_from_probs","title":"Create New Features Based on Probabilities — new_features_from_probs","text":"Input sequence probabilities get back new sequence based binomial distribution probabilities. resulting value greater 1 new sequence set 1.","code":""},{"path":"https://crumplab.com/midiblender/reference/new_features_from_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create New Features Based on Probabilities — new_features_from_probs","text":"","code":"new_features_from_probs(probs, density = 6, examples = 1)"},{"path":"https://crumplab.com/midiblender/reference/new_features_from_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create New Features Based on Probabilities — new_features_from_probs","text":"probs Numeric vector, sequence probabilities 0 1 used generate new sequence. density Integer, number trials (default 6). exmaples Inger, number examples generate (default 1)","code":""},{"path":"https://crumplab.com/midiblender/reference/new_features_from_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create New Features Based on Probabilities — new_features_from_probs","text":"example 1, sequence length probs values following binomial distribution based inputted probabilities, values greater 1 set 1. example > 1, matrix sequences, number columns length probabilities, sequences corresponding rows.","code":""},{"path":"https://crumplab.com/midiblender/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://crumplab.com/midiblender/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://crumplab.com/midiblender/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://crumplab.com/midiblender/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://crumplab.com/midiblender/reference/reshape_piano_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Piano Roll Matrix — reshape_piano_roll","title":"Reshape Piano Roll Matrix — reshape_piano_roll","text":"function reshapes piano roll matrix specified interval length. pads zero crops piano roll matrix fit desired length.","code":""},{"path":"https://crumplab.com/midiblender/reference/reshape_piano_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Piano Roll Matrix — reshape_piano_roll","text":"","code":"reshape_piano_roll(piano_roll_matrix, ticks_per_interval)"},{"path":"https://crumplab.com/midiblender/reference/reshape_piano_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Piano Roll Matrix — reshape_piano_roll","text":"piano_roll_matrix matrix reshaped. matrix rows represent pitch (0 127) columns represents time (ticks). ticks_per_interval number specifies number ticks per interval.","code":""},{"path":"https://crumplab.com/midiblender/reference/reshape_piano_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape Piano Roll Matrix — reshape_piano_roll","text":"reshaped matrix num_intervals rows (ticks_per_interval*128) columns. Rows represent time interval columns represents pitch.","code":""},{"path":"https://crumplab.com/midiblender/reference/reshape_piano_roll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape Piano Roll Matrix — reshape_piano_roll","text":"","code":"if (FALSE) { }"},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"set midi tempo in a meta messages df — set_midi_tempo_meta","title":"set midi tempo in a meta messages df — set_midi_tempo_meta","text":"set midi tempo meta messages df","code":""},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set midi tempo in a meta messages df — set_midi_tempo_meta","text":"","code":"set_midi_tempo_meta(meta_messages_df, update_tempo = 5e+05)"},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set midi tempo in a meta messages df — set_midi_tempo_meta","text":"meta_messages_df df meta messages update_tempo Integer, midi tempo update","code":""},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set midi tempo in a meta messages df — set_midi_tempo_meta","text":"updated meta_messages_df","code":""},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_midi_df.html","id":null,"dir":"Reference","previous_headings":"","what":"set midi tempo in a midi_df — set_midi_tempo_midi_df","title":"set midi tempo in a midi_df — set_midi_tempo_midi_df","text":"set midi tempo midi_df","code":""},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_midi_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set midi tempo in a midi_df — set_midi_tempo_midi_df","text":"","code":"set_midi_tempo_midi_df(midi_df, update_tempo = 5e+05)"},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_midi_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set midi tempo in a midi_df — set_midi_tempo_midi_df","text":"midi_df df returned midi_to_object copy one update_tempo Integer, midi tempo update","code":""},{"path":"https://crumplab.com/midiblender/reference/set_midi_tempo_midi_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set midi tempo in a midi_df — set_midi_tempo_midi_df","text":"updated meta_messages_df","code":""},{"path":"https://crumplab.com/midiblender/reference/split_meta_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a meta_df into list of top and end messages — split_meta_df","title":"Split a meta_df into list of top and end messages — split_meta_df","text":"Split meta_df list top end messages","code":""},{"path":"https://crumplab.com/midiblender/reference/split_meta_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a meta_df into list of top and end messages — split_meta_df","text":"","code":"split_meta_df(meta_messages_df)"},{"path":"https://crumplab.com/midiblender/reference/split_meta_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a meta_df into list of top and end messages — split_meta_df","text":"meta_messages_df meta_messages_df split","code":""},{"path":"https://crumplab.com/midiblender/reference/split_meta_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a meta_df into list of top and end messages — split_meta_df","text":"list two tibbles","code":""},{"path":"https://crumplab.com/midiblender/news/index.html","id":"midiblender-development-version","dir":"Changelog","previous_headings":"","what":"midiblender (development version)","title":"midiblender (development version)","text":"optimistic tracking changes","code":""},{"path":"https://crumplab.com/midiblender/news/index.html","id":"midiblender-0009002","dir":"Changelog","previous_headings":"","what":"midiblender 0.0.0.9002","title":"midiblender 0.0.0.9002","text":"add news.md","code":""},{"path":"https://crumplab.com/midiblender/news/index.html","id":"midiblender-0009001","dir":"Changelog","previous_headings":"","what":"midiblender 0.0.0.9001","title":"midiblender 0.0.0.9001","text":"added dplyr style functions row--row midi construction","code":""},{"path":"https://crumplab.com/midiblender/news/index.html","id":"midiblender-0009000","dir":"Changelog","previous_headings":"","what":"midiblender 0.0.0.9000","title":"midiblender 0.0.0.9000","text":"initial commit","code":""}]
